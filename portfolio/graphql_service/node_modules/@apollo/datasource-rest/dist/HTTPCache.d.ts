/// <reference types="node" />
import type { Options as HttpCacheSemanticsOptions } from 'http-cache-semantics';
import type { Fetcher, FetcherResponse, FetcherRequestInit } from '@apollo/utils.fetcher';
import { KeyValueCache } from '@apollo/utils.keyvaluecache';
import type { CacheOptions, RequestOptions, ValueOrPromise } from './RESTDataSource';
interface ResponseWithCacheWritePromise {
    response: FetcherResponse;
    cacheWritePromise?: Promise<void>;
}
export declare class HTTPCache {
    private keyValueCache;
    private httpFetch;
    constructor(keyValueCache?: KeyValueCache, httpFetch?: Fetcher);
    fetch(url: URL, requestOpts?: FetcherRequestInit, cache?: {
        cacheKey?: string;
        cacheOptions?: CacheOptions | ((url: string, response: FetcherResponse, request: RequestOptions) => ValueOrPromise<CacheOptions | undefined>);
        httpCacheSemanticsCachePolicyOptions?: HttpCacheSemanticsOptions;
    }): Promise<ResponseWithCacheWritePromise>;
    private storeResponseAndReturnClone;
    private readResponseAndWriteToCache;
}
export {};
//# sourceMappingURL=HTTPCache.d.ts.map